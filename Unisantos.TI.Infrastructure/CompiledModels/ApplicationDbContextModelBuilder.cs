// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unisantos.TI.Core.Helpers;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Unisantos.TI.Infrastructure.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var companyTag = CompanyTagEntityType.Create(this);
            var addressEntity = AddressEntityEntityType.Create(this);
            var cityEntity = CityEntityEntityType.Create(this);
            var stateEntity = StateEntityEntityType.Create(this);
            var businessHoursEntity = BusinessHoursEntityEntityType.Create(this);
            var companyEntity = CompanyEntityEntityType.Create(this);
            var favoriteEntity = FavoriteEntityEntityType.Create(this);
            var productEntity = ProductEntityEntityType.Create(this);
            var productSectionEntity = ProductSectionEntityEntityType.Create(this);
            var rateEntity = RateEntityEntityType.Create(this);
            var tagEntity = TagEntityEntityType.Create(this);
            var tagSectionEntity = TagSectionEntityEntityType.Create(this);
            var tokenEntity = TokenEntityEntityType.Create(this);
            var userEntity = UserEntityEntityType.Create(this);

            CompanyTagEntityType.CreateForeignKey1(companyTag, companyEntity);
            CompanyTagEntityType.CreateForeignKey2(companyTag, tagEntity);
            AddressEntityEntityType.CreateForeignKey1(addressEntity, cityEntity);
            CityEntityEntityType.CreateForeignKey1(cityEntity, stateEntity);
            BusinessHoursEntityEntityType.CreateForeignKey1(businessHoursEntity, companyEntity);
            CompanyEntityEntityType.CreateForeignKey1(companyEntity, addressEntity);
            CompanyEntityEntityType.CreateForeignKey2(companyEntity, userEntity);
            FavoriteEntityEntityType.CreateForeignKey1(favoriteEntity, companyEntity);
            FavoriteEntityEntityType.CreateForeignKey2(favoriteEntity, userEntity);
            ProductEntityEntityType.CreateForeignKey1(productEntity, productSectionEntity);
            ProductSectionEntityEntityType.CreateForeignKey1(productSectionEntity, companyEntity);
            RateEntityEntityType.CreateForeignKey1(rateEntity, companyEntity);
            RateEntityEntityType.CreateForeignKey2(rateEntity, userEntity);
            TagEntityEntityType.CreateForeignKey1(tagEntity, tagSectionEntity);
            TokenEntityEntityType.CreateForeignKey1(tokenEntity, userEntity);

            CompanyEntityEntityType.CreateSkipNavigation1(companyEntity, tagEntity, companyTag);
            TagEntityEntityType.CreateSkipNavigation1(tagEntity, companyEntity, companyTag);

            CompanyTagEntityType.CreateAnnotations(companyTag);
            AddressEntityEntityType.CreateAnnotations(addressEntity);
            CityEntityEntityType.CreateAnnotations(cityEntity);
            StateEntityEntityType.CreateAnnotations(stateEntity);
            BusinessHoursEntityEntityType.CreateAnnotations(businessHoursEntity);
            CompanyEntityEntityType.CreateAnnotations(companyEntity);
            FavoriteEntityEntityType.CreateAnnotations(favoriteEntity);
            ProductEntityEntityType.CreateAnnotations(productEntity);
            ProductSectionEntityEntityType.CreateAnnotations(productSectionEntity);
            RateEntityEntityType.CreateAnnotations(rateEntity);
            TagEntityEntityType.CreateAnnotations(tagEntity);
            TagSectionEntityEntityType.CreateAnnotations(tagSectionEntity);
            TokenEntityEntityType.CreateAnnotations(tokenEntity);
            UserEntityEntityType.CreateAnnotations(userEntity);

            var functions = new SortedDictionary<string, IDbFunction>();
            var haversine = new RuntimeDbFunction(
                "Unisantos.TI.Core.Helpers.DbFunctionHelpers.Haversine(double,double,double,double)",
                this,
                typeof(double),
                "haversine",
                storeType: "double precision",
                methodInfo: typeof(DbFunctionHelpers).GetMethod(
                    "Haversine",
                    BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(double), typeof(double), typeof(double), typeof(double) },
                    null),
                scalar: true,
                nullable: true);

            var latitude1 = haversine.AddParameter(
                "latitude1",
                typeof(double),
                false,
                "double precision");

            var longitude1 = haversine.AddParameter(
                "longitude1",
                typeof(double),
                false,
                "double precision");

            var latitude2 = haversine.AddParameter(
                "latitude2",
                typeof(double),
                false,
                "double precision");

            var longitude2 = haversine.AddParameter(
                "longitude2",
                typeof(double),
                false,
                "double precision");

            functions["Unisantos.TI.Core.Helpers.DbFunctionHelpers.Haversine(double,double,double,double)"] = haversine;

            AddAnnotation("Relational:DbFunctions", functions);
            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "7.0.5");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
        }
    }
}
